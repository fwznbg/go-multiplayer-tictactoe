// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.648
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func gameplay() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_gameplay_7c7f`,
		Function: `function __templ_gameplay_7c7f(){const roomId = window.location.pathname;
      const socket = new WebSocket(` + "`" + `ws://localhost:8080/api${roomId}` + "`" + `);

      const sendMove = (x, y) => {
        socket.send(JSON.stringify({ x: x, y: y }));
      };

      socket.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.type === 0) {
          // console.log(data.content);
        } else if ([2, 3].includes(data.type)) {
          const gameState = JSON.parse(data.content);
          const board = gameState.board;
          let boardElem = "";

          for (let i = 0; i < board.length; i++) {

            boardElem += ` + "`" + `
              <div class="flex items-center justify-center border-2 text-gray-50">
                <button onclick="sendMove(${i}, ${0})" class="bg-gray-800 w-16 h-16" >${
                  board[i][0]
                }</button>
                <button onclick="sendMove(${i}, ${1})" class="bg-gray-800 w-16 h-16 border-x-2" >${
                  board[i][1]
                }</button>
                <button onclick="sendMove(${i}, ${2})" class="bg-gray-800 w-16 h-16">${
                  board[i][2]
                }</button>
              </div>
            ` + "`" + `;
          }

          document.getElementById("board").innerHTML = boardElem;
        }
        if (data.type === 3) {
          // game ended
        }
        console.log(data);
      };
}`,
		Call:       templ.SafeScript(`__templ_gameplay_7c7f`),
		CallInline: templ.SafeScriptInline(`__templ_gameplay_7c7f`),
	}
}

func Room() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main id=\"board\"></main>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = Layout(gameplay()).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
